[project]
# Project's name must be the same as PROJECT_NAME environment variable used elsewhere.
name = "python-template"
version = "0.1.0"
description = "Xmartlabs' Python project template"
authors = [{ name = "Xmartlabs", email = "getintouch@xmartlabs.com" }]
readme = "README.md"
requires-python = ">=3.13.0,<4.0.0"

[tool.poetry]
# TODO(remer): this can be removed when the source files are moved to project name folder within src
# Otherwise, poetry build command fails as it expects project's name matches current folder's name
packages = [{ include = "*", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.13.0,<4.0.0"

alembic = "^1.15.1"
asyncpg = "^0.30.0"
bcrypt = "4.3.0"
email-validator = "^2.2.0"
celery = "^5.4.0"
fastapi = "^0.115.11"
fastapi-pagination = "^0.12.26"
httpx = "^0.28.1"
itsdangerous = "^2.2.0"
opentelemetry-api = "^1.31.1"
opentelemetry-sdk = "^1.31.1"
opentelemetry-instrumentation-fastapi = "^0.52b1"
opentelemetry-instrumentation-sqlalchemy = "^0.52b1"
opentelemetry-exporter-otlp = "^1.31.1"
passlib = "^1.7.4"
psycopg2 = "^2.9.9"
ptpython = "^3.0.29"
pydantic = "^2.10.6"
pydantic-settings = "^2.8.1"
python-jose = "^3.4.0"
redis = "^5.2.1"
sqladmin = "^0.20.1"
sqlalchemy = "^2.0.39"
structlog = "^25.3.0"
uvicorn = "^0.34.0"


[tool.poetry.group.dev.dependencies]
coverage = "^7.7.1"
flower = "^2.0.1"
mock = "^5.2.0"
pyright = "^1.1.402"
pytest = "^8.3.5"
pytest-asyncio = "0.26.0"
pre-commit = "^4.2.0"
ruff = "^0.11.3"

[tool.poetry.group.types.dependencies]
celery-types = "^0.23.0"
types-passlib = "^1.7.7.20241221"
types-pyasn1 = "^0.6.0.20250208"
types-python-jose = "^3.4.0.20250224"
types-mock = "^5.2.0.20250306"
typing-inspect = "^0.9.0"
typing-extensions = "^4.12.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 130
force-exclude = true                                                # Ensure exclusions are respected by the pre-commit hook
extend-exclude = ["src/alembic/versions", "__pycache__", "scripts"]

[tool.ruff.lint]
extend-select = [ # Defaults: [ "E4", "E7", "E9", "F" ] (https://docs.astral.sh/ruff/rules/#error-e)
    "E501", # line-too-long
    "I001", # unsorted-imports
    "I002", # missing-required-import
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["src"]
known-third-party = ["fastapi", "sqlalchemy", "pydantic"]
force-single-line = false
combine-as-imports = true

[tool.pyright]
include = ["src"]
exclude = ["src/alembic/versions", "**/__pycache__", "scripts"]
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.12"
typeCheckingMode = "standard"
useLibraryCodeForTypes = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
reportGeneralTypeIssues = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false
reportPrivateUsage = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryIsInstance = false
reportUnnecessaryCast = false
reportUnnecessaryComparison = false

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
