name: CI Pipeline Template

'on':
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  lint-and-format:
    name: Run Linters & Formatters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-root --with dev

      - name: Run linters and formatters
        run: |
          poetry run python -m pycln src --exclude __init__.py --all
          poetry run python -m isort src
          poetry run python -m mypy src
          poetry run python -m black src --quiet --exclude alembic
          poetry run python -m flake8 src

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    timeout-minutes: 15
    env:
      PGHOST: postgres
      PGDATABASE: dev
      PGUSERNAME: dev
      PGPASSWORD: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-root --with dev
      

      - name: Add PostgreSQL binaries to PATH
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "$PGBIN" >> $GITHUB_PATH
          elif [ "$RUNNER_OS" == "Linux" ]; then
            echo "$(pg_config --bindir)" >> $GITHUB_PATH
          fi
      - name: Start preinstalled PostgreSQL
        shell: bash
        run: |
          echo "Initializing database cluster..."

          export PGHOST="${RUNNER_TEMP//\\//}/postgres"
          export PGDATA="$PGHOST/pgdata"
          mkdir -p "$PGDATA"

          export PWFILE="$RUNNER_TEMP/pwfile"
          echo "postgres" > $PWFILE
          initdb --pgdata="$PGDATA" --username="postgres" --pwfile="$PWFILE"

          echo "Starting PostgreSQL..."
          echo "unix_socket_directories = '$PGHOST'" >> "$PGDATA/postgresql.conf"
          pg_ctl start

          echo "Creating user..."
          psql --host "$PGHOST" --username="postgres" --dbname="postgres" --command="CREATE USER $PGUSERNAME PASSWORD '$PGPASSWORD'" --command="\du"

          echo "Creating database..."
          createdb --owner="$PGUSERNAME" --username="postgres" "$PGDATABASE"
      
      - name: Run tests with coverage
        run: |
          echo "PROJECT_NAME=python-template" > .env
                echo "DATABASE_URL=postgresql://dev:dev@postgres:5432/dev" >> .env
                echo "ASYNC_DATABASE_URL=postgresql+asyncpg://dev:dev@postgres:5432/dev" >> .env
                echo "DATABASE_POOL_PRE_PING=True" >> .env
                echo "DATABASE_POOL_SIZE=5" >> .env
                echo "DATABASE_POOL_RECYCLE=3600" >> .env
                echo "DATABASE_MAX_OVERFLOW=10" >> .env
                echo "LOG_LEVEL=DEBUG" >> .env
                echo "SERVER_URL=example.com" >> .env
                echo "ACCESS_TOKEN_EXPIRE_MINUTES=15" >> .env
                echo "JWT_SIGNING_KEY=your-signing-key" >> .env
                export $(cat .env | xargs)
                poetry run coverage run -m pytest
                poetry run coverage report -m --fail-under=80

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t python-template:latest .
